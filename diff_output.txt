diff --git a/README.md b/README.md
index cd4feb8..00d6507 100644
--- a/README.md
+++ b/README.md
@@ -1,50 +1,4 @@
-# Welcome to your Expo app ðŸ‘‹
-
-This is an [Expo](https://expo.dev) project created with [`create-expo-app`](https://www.npmjs.com/package/create-expo-app).
-
-## Get started
-
-1. Install dependencies
-
-   ```bash
-   npm install
-   ```
-
-2. Start the app
-
-   ```bash
-    npx expo start
-   ```
-
-In the output, you'll find options to open the app in a
-
-- [development build](https://docs.expo.dev/develop/development-builds/introduction/)
-- [Android emulator](https://docs.expo.dev/workflow/android-studio-emulator/)
-- [iOS simulator](https://docs.expo.dev/workflow/ios-simulator/)
-- [Expo Go](https://expo.dev/go), a limited sandbox for trying out app development with Expo
-
-You can start developing by editing the files inside the **app** directory. This project uses [file-based routing](https://docs.expo.dev/router/introduction).
-
-## Get a fresh project
-
-When you're ready, run:
-
-```bash
-npm run reset-project
+Build Android Application "development -- preview -- production"
+```shell
+  eas build --profile development --platform android --no-wait
 ```
-
-This command will move the starter code to the **app-example** directory and create a blank **app** directory where you can start developing.
-
-## Learn more
-
-To learn more about developing your project with Expo, look at the following resources:
-
-- [Expo documentation](https://docs.expo.dev/): Learn fundamentals, or go into advanced topics with our [guides](https://docs.expo.dev/guides).
-- [Learn Expo tutorial](https://docs.expo.dev/tutorial/introduction/): Follow a step-by-step tutorial where you'll create a project that runs on Android, iOS, and the web.
-
-## Join the community
-
-Join our community of developers creating universal apps.
-
-- [Expo on GitHub](https://github.com/expo/expo): View our open source platform and contribute.
-- [Discord community](https://chat.expo.dev): Chat with Expo users and ask questions.
diff --git a/android/gradlew b/android/gradlew
old mode 100644
new mode 100755
diff --git a/android/gradlew.bat b/android/gradlew.bat
index 25da30d..7101f8e 100644
--- a/android/gradlew.bat
+++ b/android/gradlew.bat
@@ -1,92 +1,92 @@
-@rem
-@rem Copyright 2015 the original author or authors.
-@rem
-@rem Licensed under the Apache License, Version 2.0 (the "License");
-@rem you may not use this file except in compliance with the License.
-@rem You may obtain a copy of the License at
-@rem
-@rem      https://www.apache.org/licenses/LICENSE-2.0
-@rem
-@rem Unless required by applicable law or agreed to in writing, software
-@rem distributed under the License is distributed on an "AS IS" BASIS,
-@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-@rem See the License for the specific language governing permissions and
-@rem limitations under the License.
-@rem
-
-@if "%DEBUG%"=="" @echo off
-@rem ##########################################################################
-@rem
-@rem  Gradle startup script for Windows
-@rem
-@rem ##########################################################################
-
-@rem Set local scope for the variables with windows NT shell
-if "%OS%"=="Windows_NT" setlocal
-
-set DIRNAME=%~dp0
-if "%DIRNAME%"=="" set DIRNAME=.
-@rem This is normally unused
-set APP_BASE_NAME=%~n0
-set APP_HOME=%DIRNAME%
-
-@rem Resolve any "." and ".." in APP_HOME to make it shorter.
-for %%i in ("%APP_HOME%") do set APP_HOME=%%~fi
-
-@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
-set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"
-
-@rem Find java.exe
-if defined JAVA_HOME goto findJavaFromJavaHome
-
-set JAVA_EXE=java.exe
-%JAVA_EXE% -version >NUL 2>&1
-if %ERRORLEVEL% equ 0 goto execute
-
-echo. 1>&2
-echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH. 1>&2
-echo. 1>&2
-echo Please set the JAVA_HOME variable in your environment to match the 1>&2
-echo location of your Java installation. 1>&2
-
-goto fail
-
-:findJavaFromJavaHome
-set JAVA_HOME=%JAVA_HOME:"=%
-set JAVA_EXE=%JAVA_HOME%/bin/java.exe
-
-if exist "%JAVA_EXE%" goto execute
-
-echo. 1>&2
-echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME% 1>&2
-echo. 1>&2
-echo Please set the JAVA_HOME variable in your environment to match the 1>&2
-echo location of your Java installation. 1>&2
-
-goto fail
-
-:execute
-@rem Setup the command line
-
-set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
-
-
-@rem Execute Gradle
-"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %*
-
-:end
-@rem End local scope for the variables with windows NT shell
-if %ERRORLEVEL% equ 0 goto mainEnd
-
-:fail
-rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
-rem the _cmd.exe /c_ return code!
-set EXIT_CODE=%ERRORLEVEL%
-if %EXIT_CODE% equ 0 set EXIT_CODE=1
-if not ""=="%GRADLE_EXIT_CONSOLE%" exit %EXIT_CODE%
-exit /b %EXIT_CODE%
-
-:mainEnd
-if "%OS%"=="Windows_NT" endlocal
-
-:omega
+@rem
+@rem Copyright 2015 the original author or authors.
+@rem
+@rem Licensed under the Apache License, Version 2.0 (the "License");
+@rem you may not use this file except in compliance with the License.
+@rem You may obtain a copy of the License at
+@rem
+@rem      https://www.apache.org/licenses/LICENSE-2.0
+@rem
+@rem Unless required by applicable law or agreed to in writing, software
+@rem distributed under the License is distributed on an "AS IS" BASIS,
+@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+@rem See the License for the specific language governing permissions and
+@rem limitations under the License.
+@rem
+
+@if "%DEBUG%"=="" @echo off
+@rem ##########################################################################
+@rem
+@rem  Gradle startup script for Windows
+@rem
+@rem ##########################################################################
+
+@rem Set local scope for the variables with windows NT shell
+if "%OS%"=="Windows_NT" setlocal
+
+set DIRNAME=%~dp0
+if "%DIRNAME%"=="" set DIRNAME=.
+@rem This is normally unused
+set APP_BASE_NAME=%~n0
+set APP_HOME=%DIRNAME%
+
+@rem Resolve any "." and ".." in APP_HOME to make it shorter.
+for %%i in ("%APP_HOME%") do set APP_HOME=%%~fi
+
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"
+
+@rem Find java.exe
+if defined JAVA_HOME goto findJavaFromJavaHome
+
+set JAVA_EXE=java.exe
+%JAVA_EXE% -version >NUL 2>&1
+if %ERRORLEVEL% equ 0 goto execute
+
+echo. 1>&2
+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH. 1>&2
+echo. 1>&2
+echo Please set the JAVA_HOME variable in your environment to match the 1>&2
+echo location of your Java installation. 1>&2
+
+goto fail
+
+:findJavaFromJavaHome
+set JAVA_HOME=%JAVA_HOME:"=%
+set JAVA_EXE=%JAVA_HOME%/bin/java.exe
+
+if exist "%JAVA_EXE%" goto execute
+
+echo. 1>&2
+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME% 1>&2
+echo. 1>&2
+echo Please set the JAVA_HOME variable in your environment to match the 1>&2
+echo location of your Java installation. 1>&2
+
+goto fail
+
+:execute
+@rem Setup the command line
+
+set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
+
+
+@rem Execute Gradle
+"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %*
+
+:end
+@rem End local scope for the variables with windows NT shell
+if %ERRORLEVEL% equ 0 goto mainEnd
+
+:fail
+rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
+rem the _cmd.exe /c_ return code!
+set EXIT_CODE=%ERRORLEVEL%
+if %EXIT_CODE% equ 0 set EXIT_CODE=1
+if not ""=="%GRADLE_EXIT_CONSOLE%" exit %EXIT_CODE%
+exit /b %EXIT_CODE%
+
+:mainEnd
+if "%OS%"=="Windows_NT" endlocal
+
+:omega
diff --git a/app.json b/app.json
index 1eb1f32..2024ec8 100644
--- a/app.json
+++ b/app.json
@@ -13,7 +13,8 @@
       "backgroundColor": "#ffffff"
     },
     "ios": {
-      "supportsTablet": true
+      "supportsTablet": true,
+      "bundleIdentifier": "io.ldsgroups.yekoPointage"
     },
     "android": {
       "adaptiveIcon": {
diff --git a/app/(auth)/login.tsx b/app/(auth)/login.tsx
index 2e7b324..7dc0ce1 100644
--- a/app/(auth)/login.tsx
+++ b/app/(auth)/login.tsx
@@ -1,5 +1,5 @@
 import React, { useState } from "react";
-import { View, Text, StyleSheet } from "react-native";
+import { View, Text, StyleSheet, Image } from "react-native";
 import { useLocalSearchParams, useRouter } from "expo-router";
 import { useAuth } from "@/hooks/useAuth";
 import LoginForm from "@/components/LoginForm";
@@ -8,7 +8,7 @@ import { LoginCredentials, UserRole } from "@/types";
 import { useSchool } from "@/hooks";
 
 export default function LoginScreen() {
-  const { login, logout, user } = useAuth();
+  const { login, logout } = useAuth();
   const { verifyDirectorAccess } = useSchool();
 
   const router = useRouter();
@@ -23,7 +23,7 @@ export default function LoginScreen() {
     setIsLoading(true);
     setError(null);
     try {
-      await login(credentials.email, credentials.password);
+      const user = await login(credentials.email, credentials.password);
 
       if (!user || !user.id.length) return await logout();
       const isDirector = await verifyDirectorAccess(user.id, schoolId);
@@ -33,12 +33,10 @@ export default function LoginScreen() {
       } else {
         await logout();
       }
-
-      // If login is successful, the root layout will handle the redirect
     } catch (err) {
       await logout();
       console.error("[E_LOGIN]:", err);
-      setError("Login failed. Please check your credentials and try again.");
+      setError("Email ou mot de passe incorrect.");
     } finally {
       setIsLoading(false);
     }
@@ -50,7 +48,11 @@ export default function LoginScreen() {
 
   return (
     <View style={styles.container}>
-      <Text style={styles.title}>Login to Yeko Pointage</Text>
+      <Image source={require("@/assets/images/icon.png")} style={styles.logo} />
+      <Text style={styles.title}>Rebonjour !!</Text>
+      <Text style={styles.description}>
+        Connectez-vous pour attribuer la tablette Ã  une classe
+      </Text>
       <LoginForm onSubmit={handleLogin} />
       {error && <Text style={styles.error}>{error}</Text>}
     </View>
@@ -61,13 +63,25 @@ const styles = StyleSheet.create({
   container: {
     flex: 1,
     justifyContent: "center",
-    padding: 20,
+    padding: 30,
+  },
+  logo: {
+    width: 150,
+    height: 150,
+    alignSelf: "center",
+    marginBottom: 20,
   },
   title: {
-    fontSize: 24,
+    fontSize: 28,
     fontWeight: "bold",
-    marginBottom: 20,
+    marginBottom: 10,
+    textAlign: "center",
+  },
+  description: {
+    fontSize: 16,
+    color: "#666",
     textAlign: "center",
+    marginBottom: 30,
   },
   error: {
     color: "red",
diff --git a/app/(auth)/qr-scan.tsx b/app/(auth)/qr-scan.tsx
index 646fbb2..5b1da01 100644
--- a/app/(auth)/qr-scan.tsx
+++ b/app/(auth)/qr-scan.tsx
@@ -43,15 +43,15 @@ const WelcomeModal: React.FC<WelcomeModalProps> = ({
       <View style={styles.modalOverlay}>
         <CsCard style={styles.modalContent}>
           <CsText variant="h3" style={styles.modalTitle}>
-            Welcome, {teacher.fullName}!
+            Rebonjour, {teacher.fullName}!
           </CsText>
           <CsText variant="body" style={styles.modalText}>
-            Your class is scheduled from{" "}
-            {extractHourAndMinute(schedule.startTime)} to{" "}
+            Votre cours ici commence de{" "}
+            {extractHourAndMinute(schedule.startTime)} Ã {" "}
             {extractHourAndMinute(schedule.endTime)}.
           </CsText>
           <CsButton
-            title="Continue"
+            title="Continuer"
             onPress={onContinue}
             style={styles.modalButton}
           />
@@ -252,23 +252,24 @@ export default function QRScanScreen() {
             </CsText>
           </CsCard>
         )}
-        <CsButton
-          title={showScanner ? "Annuler le scan" : "Commencer le scan"}
-          onPress={toggleScanner}
-          style={styles.button}
-        />
 
         {/* TODO: Remove later */}
         <CsButton
           title="Simuler le rÃ©sultat du scan"
           onPress={() =>
             handleQRScan(
-              "teacher|---|66c0ceef0014ccb3fcc8|---|66c2b025001639733b61",
+              "teacher|---|ed85f4e4-5133-4270-b52d-795c6e65c0f0|---|69e60b99-2c30-484f-b9fb-c39799497690",
             )
           }
           variant="text"
           style={styles.simulateButton}
         />
+
+        <CsButton
+          title={showScanner ? "Annuler le scan" : "Commencer le scan"}
+          onPress={toggleScanner}
+          style={styles.button}
+        />
       </Animated.View>
 
       {showScanner && (
@@ -326,8 +327,8 @@ const createStyles = (theme: Theme) =>
       marginBottom: spacing.xl,
     },
     logo: {
-      width: 100,
-      height: 100,
+      width: 260,
+      height: 260,
       resizeMode: "contain",
     },
     title: {
diff --git a/app/(director)/_layout.tsx b/app/(director)/_layout.tsx
index 45f28a5..1650f0a 100644
--- a/app/(director)/_layout.tsx
+++ b/app/(director)/_layout.tsx
@@ -13,10 +13,10 @@ const DirectorLayout = () => {
     return (
       <View style={styles.unauthorizedContainer}>
         <CsText variant="h2" color="error">
-          Unauthorized Access
+          AccÃ¨s non autorisÃ©
         </CsText>
         <CsText variant="body">
-          You do not have permission to access this area.
+          Vous n'avez pas la permission d'accÃ©der Ã  cette zone.
         </CsText>
       </View>
     );
@@ -31,7 +31,7 @@ const DirectorLayout = () => {
       <Stack.Screen
         name="configure-tablet"
         options={{
-          title: "Configure Tablet",
+          title: "Configurer la tablette",
         }}
       />
     </Stack>
diff --git a/app/(director)/configure-tablet.tsx b/app/(director)/configure-tablet.tsx
index 791eca0..ad0bf68 100644
--- a/app/(director)/configure-tablet.tsx
+++ b/app/(director)/configure-tablet.tsx
@@ -166,7 +166,7 @@ const ConfigureTablet = () => {
     <ScrollView contentContainerStyle={styles.container}>
       <CsCard style={styles.card}>
         <CsText variant="h3" style={styles.title}>
-          Configure Tablet
+          Configurer la tablette
         </CsText>
 
         {error && (
@@ -176,12 +176,12 @@ const ConfigureTablet = () => {
         )}
 
         <CsText variant="body" style={styles.label}>
-          Select Grade
+          SÃ©lectionner le niveau
         </CsText>
         {renderGradeChips()}
 
         <CsPicker
-          label="Select Class"
+          label="SÃ©lectionner la classe"
           items={filteredClasses.map((c) => ({ label: c.name, value: c.id }))}
           selectedValue={selectedClass?.id}
           onValueChange={handleClassSelection}
@@ -190,13 +190,14 @@ const ConfigureTablet = () => {
 
         {filteredClasses.length === 0 && selectedGrade && (
           <CsText variant="body" style={styles.noClassesMessage}>
-            This school doesn't have classes available for the selected grade.
-            Please contact the administrator to create them if required.
+            Cette Ã©cole n'a pas de classes disponibles pour le niveau
+            sÃ©lectionnÃ©. Veuillez contacter l'administrateur pour les crÃ©er si
+            nÃ©cessaire.
           </CsText>
         )}
 
         <CsButton
-          title="Save Configuration"
+          title="Enregistrer la configuration"
           onPress={handleSaveConfig}
           style={styles.button}
           disabled={!selectedClass || loading}
@@ -208,7 +209,7 @@ const ConfigureTablet = () => {
         isVisible={showConfirmation}
         onConfirm={handleConfirmation}
         onCancel={() => setShowConfirmation(false)}
-        message="Tablet configuration saved successfully! You will be logged out now."
+        message="La configuration de la tablette a Ã©tÃ© enregistrÃ©e avec succÃ¨s ! Vous allez Ãªtre dÃ©connectÃ© maintenant."
       />
     </ScrollView>
   );
diff --git a/app/(teacher)/homework.tsx b/app/(teacher)/homework.tsx
index 0c3ec35..1af9c19 100644
--- a/app/(teacher)/homework.tsx
+++ b/app/(teacher)/homework.tsx
@@ -53,7 +53,7 @@ const HomeworkScreen: React.FC<HomeworkScreenProps> = ({
       isGraded,
       teacherId: currentTeacher!.id,
       classId: currentClass!.id,
-      subjectName: currentSchedule?.subjectName ?? "",
+      subjectId: currentSchedule!.subjectId,
     };
     setCurrentHomework(homework);
     onSubmit();
diff --git a/components/LoginForm.tsx b/components/LoginForm.tsx
index b90d0c3..557c9e0 100644
--- a/components/LoginForm.tsx
+++ b/components/LoginForm.tsx
@@ -1,6 +1,6 @@
 import React, { useState } from "react";
-import { Text, View } from "react-native";
-import { CsTextField, CsButton } from "@/components/commons";
+import { View, StyleSheet } from "react-native";
+import { CsTextField, CsButton, CsText } from "@/components/commons";
 import { LoginCredentials } from "@/types";
 import { isValidEmail, isValidPassword } from "@/utils/validators";
 
@@ -17,13 +17,13 @@ export default function LoginForm({ onSubmit }: LoginFormProps) {
     setError(null);
 
     if (!isValidEmail(email)) {
-      setError("Please enter a valid email address.");
+      setError("Entrer un email valide.");
       return;
     }
 
     if (!isValidPassword(password)) {
       setError(
-        "Password must be at least 8 characters long and contain uppercase, lowercase letters, and numbers.",
+        "Le mot de passe doit contenir au moins 8 caractÃ¨res, dont des majuscules, des minuscules et des chiffres.",
       );
       return;
     }
@@ -34,56 +34,89 @@ export default function LoginForm({ onSubmit }: LoginFormProps) {
     } catch (err) {
       if (err instanceof Error) {
         if (err.message.includes("Network Error")) {
-          setError("Network error. Please check your connection.");
+          setError("Erreur rÃ©seau. Veuillez vÃ©rifier votre connexion.");
         } else if (err.message.includes("401")) {
-          setError("Invalid credentials. Please try again.");
+          setError("Identifiants invalides. Veuillez rÃ©essayer.");
         } else {
-          setError("An unexpected error occurred. Please try again later.");
+          setError(
+            "Une erreur inattendue s'est produite. Veuillez rÃ©essayer plus tard.",
+          );
         }
       } else {
-        setError("An unexpected error occurred. Please try again later.");
+        setError(
+          "Une erreur inattendue s'est produite. Veuillez rÃ©essayer plus tard.",
+        );
       }
     }
   };
 
   return (
-    <View style={{ padding: 20 }}>
+    <View style={styles.formContainer}>
       <CsTextField
         label="Email"
         value={email}
         onChangeText={setEmail}
-        placeholder="Enter your email"
+        placeholder="Entrer votre email"
         error={
           error && !isValidEmail(email)
-            ? "Please enter a valid email address."
+            ? "Entrer un email vailde s'il vous plaÃ®t."
             : ""
         }
         autoCapitalize="none"
         returnKeyType="next"
       />
       <CsTextField
-        label="Password"
+        label="Mot de passe"
         value={password}
         onChangeText={setPassword}
-        placeholder="Enter your password"
+        placeholder="Entrer votre mot de passe"
         secureTextEntry
         error={
           error && !isValidPassword(password)
-            ? "Password must be at least 8 characters long and contain uppercase, lowercase letters, and numbers."
+            ? "8 caractÃ¨res minimum (majuscules, minuscules, chiffres)."
             : ""
         }
         returnKeyType="done"
       />
       <CsButton
         onPress={handleLogin}
-        title="Login"
+        title="Se connecter"
         disabled={false}
         loading={false}
         variant="primary"
         size="medium"
         style={{ marginTop: 10 }}
       />
-      {error && <Text style={{ color: "red", marginTop: 10 }}>{error}</Text>}
+      {error && <CsText style={styles.error}>{error}</CsText>}
     </View>
   );
 }
+
+const styles = StyleSheet.create({
+  formContainer: {
+    display: "flex",
+    flexDirection: "column",
+    backgroundColor: "#fff",
+    padding: 20,
+    borderRadius: 10,
+    shadowColor: "#000",
+    shadowOffset: {
+      width: 0,
+      height: 2,
+    },
+    shadowOpacity: 0.25,
+    shadowRadius: 3.84,
+    elevation: 5,
+    gap: 20,
+  },
+  forgotPassword: {
+    textAlign: "right",
+    marginTop: 10,
+    color: "#007bff",
+  },
+  error: {
+    color: "red",
+    textAlign: "center",
+    marginTop: 10,
+  },
+});
diff --git a/components/commons/CsPicker/index.tsx b/components/commons/CsPicker/index.tsx
index e92dfa6..fe548f0 100644
--- a/components/commons/CsPicker/index.tsx
+++ b/components/commons/CsPicker/index.tsx
@@ -24,6 +24,7 @@ export const CsPicker: React.FC<CsPickerProps> = ({
       <Picker
         selectedValue={selectedValue}
         onValueChange={onValueChange}
+        placeholder={label}
         style={styles.picker}
       >
         {/* Add a placeholder item if selectedValue is null or undefined */}
diff --git a/hooks/useAttendance.ts b/hooks/useAttendance.ts
index c3c21ad..f880e3c 100644
--- a/hooks/useAttendance.ts
+++ b/hooks/useAttendance.ts
@@ -2,9 +2,6 @@ import { useState } from "react";
 import { attendance } from "@/services/attendance";
 import { AttendanceRecord } from "@/types";
 
-/**
- * Return type for the `useAttendance` hook.
- */
 interface UseAttendanceReturn {
   createAttendance: (attendanceData: AttendanceRecord) => Promise<void>;
   createAttendances: (attendanceDataArray: AttendanceRecord[]) => Promise<void>;
@@ -12,26 +9,10 @@ interface UseAttendanceReturn {
   error: string | null;
 }
 
-/**
- * Custom React hook for managing attendance-related data and actions.
- *
- * Provides functions for creating attendance records, while managing loading
- * and error states.
- *
- * @returns {UseAttendanceReturn} An object containing functions and state for managing attendance data.
- */
 export const useAttendance = (): UseAttendanceReturn => {
   const [loading, setLoading] = useState(false);
   const [error, setError] = useState<string | null>(null);
 
-  /**
-   * Asynchronously creates a new attendance record.
-   *
-   * Updates the loading and error states accordingly.
-   *
-   * @param {AttendanceRecord} attendanceData - The attendance data to create.
-   * @returns {Promise<void>} A promise that resolves when the attendance record is created.
-   */
   const createAttendance = async (
     attendanceData: AttendanceRecord,
   ): Promise<void> => {
@@ -48,14 +29,6 @@ export const useAttendance = (): UseAttendanceReturn => {
     }
   };
 
-  /**
-   * Asynchronously creates multiple attendance records.
-   *
-   * Updates the loading and error states accordingly.
-   *
-   * @param {AttendanceRecord[]} attendanceDataArray - An array of attendance data to create.
-   * @returns {Promise<void>} A promise that resolves when all attendance records are created.
-   */
   const createAttendances = async (
     attendanceDataArray: AttendanceRecord[],
   ): Promise<void> => {
diff --git a/hooks/useAuth.ts b/hooks/useAuth.ts
index dfc0c35..f1c0458 100644
--- a/hooks/useAuth.ts
+++ b/hooks/useAuth.ts
@@ -3,42 +3,13 @@ import { auth } from "@/services/auth";
 import { User } from "@/types";
 import { supabase, USERS_TABLE_ID } from "@/lib/supabase";
 
-/**
- * Return type for the `useAuth` hook.
- */
 interface useAuthReturn {
   user: User | null;
   loading: boolean;
-  login: (email: string, password: string) => Promise<void>;
+  login: (email: string, password: string) => Promise<User | null>;
   logout: () => Promise<void>;
 }
 
-/**
- * Custom React hook for managing user authentication and authorization.
- *
- * This hook provides functions for checking authentication status, logging in,
- * logging out, and accessing the current user's data. It interacts with the
- * `auth` service to perform authentication-related operations.
- *
- * @returns {useAuthReturn} An object containing the user object, loading state,
- * and functions for login and logout.
- *
- * @example
- * ```
- * const { user, loading, login, logout } = useAuth();
- *
- * if (loading) {
- *   return <div>Loading...</div>;
- * }
- *
- * if (!user) {
- *   return <Login />;
- * }
- *
- * // User is authenticated, show protected content
- * return <Profile user={user} />;
- * ```
- */
 export const useAuth = (): useAuthReturn => {
   const [user, setUser] = useState<User | null>(null);
   const [loading, setLoading] = useState(true);
@@ -47,73 +18,63 @@ export const useAuth = (): useAuthReturn => {
     checkAuth().then((r) => r);
   }, []);
 
-  /**
-   * Checks the authentication status and fetches user data if authenticated.
-   *
-   * This function is called when the component mounts and attempts to retrieve
-   * the current user's information using the `auth.getAccount` service. If
-   * successful, it updates the `user` state with the retrieved user data. If
-   * an error occurs during authentication, the `user` state remains null.
-   */
-  const checkAuth = async () => {
+  const getRoleString = (roleInt: number | null): "teacher" | "director" => {
+    switch (roleInt) {
+      case 2:
+        return "teacher";
+      case 3:
+        return "director";
+      default:
+        return "teacher";
+    }
+  };
+
+  const checkAuth = async (): Promise<User | null> => {
     try {
       const {
         data: { session },
       } = await auth.getAccount();
+
       if (session) {
-        const {
-          data: { user },
-        } = await supabase
+        const { data } = await supabase
           .from(USERS_TABLE_ID)
-          .select("*")
+          .select("id, push_token, email, role_id, school_id")
           .eq("id", session.user.id)
           .single();
-        setUser({
-          id: user?.id || "",
-          email: user?.email || "",
-          firstName: user?.first_name || "",
-          lastName: user?.last_name || "",
-          role: user?.role || "",
-          schoolId: user?.school_id || "",
-        });
+
+        if (!data) return user;
+        const newUser: User = {
+          id: data?.id || "",
+          email: data?.email || "",
+          role: getRoleString(data?.role_id),
+          schoolId: data?.school_id || "",
+        };
+
+        setUser(newUser);
+
+        return newUser;
       } else {
         setUser(null);
+        return null;
       }
     } catch (err) {
       console.error("[E_AUTH_CHECK]:", err);
       setUser(null);
+      return null;
     } finally {
       setLoading(false);
     }
   };
 
-  /**
-   * Logs in a user with the provided email and password.
-   *
-   * This function calls the `auth.loginWithEmailAndPassword` service to authenticate the
-   * user. If successful, it updates the user state by calling `checkAuth`.
-   *
-   * @param {string} email - The user's email address.
-   * @param {string} password - The user's password.
-   * @throws {Error} If an error occurs during login.
-   */
   const login = async (email: string, password: string) => {
     try {
       await auth.loginWithEmailAndPassword(email, password);
-      await checkAuth();
+      return await checkAuth();
     } catch (error) {
       throw error;
     }
   };
 
-  /**
-   * Logs out the current user.
-   *
-   * This function calls the `auth.deleteSession` service to end the current
-   * session. It then sets the `user` state to null.
-   *
-   * @throws {Error} If an error occurs during logout.
-   */
   const logout = async () => {
     try {
       await auth.deleteSession();
diff --git a/hooks/useClass.ts b/hooks/useClass.ts
index 43302ee..2c781aa 100644
--- a/hooks/useClass.ts
+++ b/hooks/useClass.ts
@@ -2,36 +2,16 @@ import { useState } from "react";
 import { classService } from "@/services/class";
 import { ClassDetails } from "@/types";
 
-/**
- * Return type for the `useClass` hook.
- */
 interface UseClassReturn {
   fetchClassDetails: (classId: string) => Promise<ClassDetails | null>;
   loading: boolean;
   error: string | null;
 }
 
-/**
- * Custom React hook for managing class-related data fetching and state.
- *
- * Provides a function for fetching class details (including students, teachers, and schedules)
- * while managing loading and error states.
- *
- * @returns {UseClassReturn} An object containing functions and state for managing class data.
- */
 export const useClass = (): UseClassReturn => {
   const [loading, setLoading] = useState(false);
   const [error, setError] = useState<string | null>(null);
 
-  /**
-   * Asynchronously fetches the details for a specific class.
-   *
-   * Updates the loading and error states accordingly.
-   *
-   * @param {string} classId - The ID of the class to fetch details for.
-   * @returns {Promise<ClassDetails | null>} A promise that resolves to a `ClassDetails` object if successful,
-   *                            or `null` if an error occurs.
-   */
   const fetchClassDetails = async (
     classId: string,
   ): Promise<ClassDetails | null> => {
diff --git a/hooks/useHomework.ts b/hooks/useHomework.ts
index 9f5c7dc..9129f94 100644
--- a/hooks/useHomework.ts
+++ b/hooks/useHomework.ts
@@ -2,9 +2,6 @@ import { useState } from "react";
 import { homework } from "@/services/homework";
 import { Homework } from "@/types";
 
-/**
- * Return type for the `useHomework` hook.
- */
 interface UseHomeworkReturn {
   createHomework: (homeworkData: Homework) => Promise<void>;
   createHomeworks: (homeworkDataArray: Homework[]) => Promise<void>;
@@ -12,60 +9,10 @@ interface UseHomeworkReturn {
   error: string | null;
 }
 
-/**
- * Custom React hook for managing homework-related data and actions.
- *
- * Provides functions for creating homework records, while managing loading
- * and error states.
- *
- * @returns {UseHomeworkReturn} An object containing functions and state for managing homework data.
- *
- * @example
- * const { createHomework, createHomeworks, loading, error } = useHomework();
- *
- * // Creating a single homework
- * const handleCreateHomework = async () => {
- *   const homeworkData = {
- *     classId: 'class123',
- *     teacherId: 'teacher456',
- *     subjectName: 'Math',
- *     dueDate: '2024-04-15',
- *     isGraded: true,
- *   };
- *   try {
- *     await createHomework(homeworkData);
- *     console.log('Homework created successfully');
- *   } catch (error) {
- *     console.error('Failed to create homework:', error);
- *   }
- * };
- *
- * // Creating multiple homeworks
- * const handleCreateMultipleHomeworks = async () => {
- *   const homeworkDataArray = [
- *     { classId: 'class123', teacherId: 'teacher456', subjectName: 'Math', dueDate: '2024-04-15', isGraded: true },
- *     { classId: 'class789', teacherId: 'teacher101', subjectName: 'Science', dueDate: '2024-04-20', isGraded: false },
- *   ];
- *   try {
- *     await createHomeworks(homeworkDataArray);
- *     console.log('Homeworks created successfully');
- *   } catch (error) {
- *     console.error('Failed to create homeworks:', error);
- *   }
- * };
- */
 export const useHomework = (): UseHomeworkReturn => {
   const [loading, setLoading] = useState(false);
   const [error, setError] = useState<string | null>(null);
 
-  /**
-   * Asynchronously creates a new homework record.
-   *
-   * Updates the loading and error states accordingly.
-   *
-   * @param {Homework} homeworkData - The homework data to create.
-   * @returns {Promise<void>} A promise that resolves when the homework record is created.
-   */
   const createHomework = async (homeworkData: Homework): Promise<void> => {
     setLoading(true);
     setError(null);
@@ -80,14 +27,6 @@ export const useHomework = (): UseHomeworkReturn => {
     }
   };
 
-  /**
-   * Asynchronously creates multiple homework records.
-   *
-   * Updates the loading and error states accordingly.
-   *
-   * @param {Homework[]} homeworkDataArray - An array of homework data to create.
-   * @returns {Promise<void>} A promise that resolves when all homework records are created.
-   */
   const createHomeworks = async (
     homeworkDataArray: Homework[],
   ): Promise<void> => {
diff --git a/hooks/useParticipation.ts b/hooks/useParticipation.ts
index d842371..712dbae 100644
--- a/hooks/useParticipation.ts
+++ b/hooks/useParticipation.ts
@@ -2,86 +2,28 @@ import { useState } from "react";
 import { participation } from "@/services/participation";
 import { Participation } from "@/types";
 
-/**
- * Return type for the `useParticipation` hook.
- */
 interface UseParticipationReturn {
   createParticipation: (
     classId: string,
-    teacherId: string,
+    subjectId: string,
     participationData: Participation,
   ) => Promise<void>;
   createParticipations: (
     classId: string,
-    teacherId: string,
+    subjectId: string,
     participationDataArray: Participation[],
   ) => Promise<void>;
   loading: boolean;
   error: string | null;
 }
 
-/**
- * Custom React hook for managing participation-related data and actions.
- *
- * Provides functions for creating participation records, while managing loading
- * and error states.
- *
- * @returns {UseParticipationReturn} An object containing functions and state for managing participation data.
- *
- * @example
- * const { createParticipation, createParticipations, loading, error } = useParticipation();
- *
- * // Creating a single participation record
- * const handleCreateParticipation = async () => {
- *   const classId = 'class123';
- *   const teacherId = 'teacher456';
- *   const participationData = {
- *     studentId: 'student789',
- *     sessionId: 'session101112',
- *     comment: 'Active participation in group discussion',
- *     timestamp: new Date().toISOString(),
- *   };
- *   try {
- *     await createParticipation(classId, teacherId, participationData);
- *     console.log('Participation created successfully');
- *   } catch (error) {
- *     console.error('Failed to create participation:', error);
- *   }
- * };
- *
- * // Creating multiple participation records
- * const handleCreateMultipleParticipations = async () => {
- *   const classId = 'class123';
- *   const teacherId = 'teacher456';
- *   const participationDataArray = [
- *     { studentId: 'student789', sessionId: 'session101112', comment: 'Active in discussion', timestamp: new Date().toISOString() },
- *     { studentId: 'student101112', sessionId: 'session101112', comment: 'Asked insightful questions', timestamp: new Date().toISOString() },
- *   ];
- *   try {
- *     await createParticipations(classId, teacherId, participationDataArray);
- *     console.log('Participations created successfully');
- *   } catch (error) {
- *     console.error('Failed to create participations:', error);
- *   }
- * };
- */
 export const useParticipation = (): UseParticipationReturn => {
   const [loading, setLoading] = useState(false);
   const [error, setError] = useState<string | null>(null);
 
-  /**
-   * Asynchronously creates a new participation record.
-   *
-   * Updates the loading and error states accordingly.
-   *
-   * @param {string} classId - The ID of the class.
-   * @param {string} teacherId - The ID of the teacher.
-   * @param {Participation} participationData - The participation data to create.
-   * @returns {Promise<void>} A promise that resolves when the participation record is created.
-   */
   const createParticipation = async (
     classId: string,
-    teacherId: string,
+    subjectId: string,
     participationData: Participation,
   ): Promise<void> => {
     setLoading(true);
@@ -89,7 +31,7 @@ export const useParticipation = (): UseParticipationReturn => {
     try {
       await participation.createParticipation(
         classId,
-        teacherId,
+        subjectId,
         participationData,
       );
     } catch (err) {
@@ -101,19 +43,9 @@ export const useParticipation = (): UseParticipationReturn => {
     }
   };
 
-  /**
-   * Asynchronously creates multiple participation records.
-   *
-   * Updates the loading and error states accordingly.
-   *
-   * @param {string} classId - The ID of the class.
-   * @param {string} teacherId - The ID of the teacher.
-   * @param {Participation[]} participationDataArray - An array of participation data to create.
-   * @returns {Promise<void>} A promise that resolves when all participation records are created.
-   */
   const createParticipations = async (
     classId: string,
-    teacherId: string,
+    subjectId: string,
     participationDataArray: Participation[],
   ): Promise<void> => {
     setLoading(true);
@@ -121,7 +53,7 @@ export const useParticipation = (): UseParticipationReturn => {
     try {
       await participation.createParticipations(
         classId,
-        teacherId,
+        subjectId,
         participationDataArray,
       );
     } catch (err) {
diff --git a/hooks/useParticipationManagement.ts b/hooks/useParticipationManagement.ts
index b37c623..df38000 100644
--- a/hooks/useParticipationManagement.ts
+++ b/hooks/useParticipationManagement.ts
@@ -15,6 +15,7 @@ export const useParticipationManagement = (
   teacherId: string,
   classId: string,
 ) => {
+  const currentSchedule = useAtomValue(currentScheduleAtom);
   const fullStudents = useAtomValue(studentsListAtom);
   const currentAttendanceSession = useAtomValue(currentAttendanceSessionAtom);
   const currentHomework = useAtomValue(currentHomeworkAtom);
@@ -111,7 +112,7 @@ export const useParticipationManagement = (
     setIsSubmitting(true);
     const participationSession: ParticipationSession = {
       classId,
-      teacherId,
+      subjectId: currentSchedule!.subjectId,
       date: new Date().toISOString(),
       participations,
     };
@@ -122,7 +123,11 @@ export const useParticipationManagement = (
         currentAttendanceSession &&
           createAttendances(currentAttendanceSession.records),
         participations.length &&
-          createParticipations(classId, teacherId, participations),
+          createParticipations(
+            classId,
+            currentSchedule!.subjectId,
+            participations,
+          ),
         currentHomework && createHomework(currentHomework),
       ]);
 
@@ -131,27 +136,25 @@ export const useParticipationManagement = (
       setCurrentParticipationSession(null);
       setCurrentHomework(null);
       setCurrentSchedule(null);
-      return true; // Indicate successful submission
+      return true;
     } catch (e) {
       console.error("Error submitting session data:", e);
       Alert.alert("Error", "Failed to submit session data. Please try again.");
     } finally {
       setIsSubmitting(false);
     }
-    return false; // Indicate failed submission
+    return false;
   }, [
     isParticipationRangeValid,
     classId,
     teacherId,
     participations,
+    setCurrentParticipationSession,
     currentAttendanceSession,
-    currentHomework,
     createAttendances,
-    createParticipations,
-    createHomework,
     setCurrentAttendanceSession,
-    setCurrentParticipationSession,
     setCurrentHomework,
+    setCurrentSchedule,
   ]);
 
   const participationStats = useMemo(() => {
diff --git a/hooks/useSchool.ts b/hooks/useSchool.ts
index af30fe1..d6544a7 100644
--- a/hooks/useSchool.ts
+++ b/hooks/useSchool.ts
@@ -2,9 +2,6 @@ import { useState } from "react";
 import { school } from "@/services/school";
 import { Class, Cycle, Grade, School } from "@/types";
 
-/**
- * Return type for the `useSchool` hook.
- */
 interface UseSchoolReturn {
   fetchSchoolClasses: (schoolId: string) => Promise<Class[]>;
   fetchCycles: () => Promise<Cycle[]>;
@@ -15,27 +12,10 @@ interface UseSchoolReturn {
   error: string | null;
 }
 
-/**
- * Custom React hook for managing school-related data fetching and state.
- *
- * Provides functions for fetching school classes, cycles, grades, and verifying
- * director access, while managing loading and error states.
- *
- * @returns {UseSchoolReturn} An object containing functions and state for managing school data.
- */
 export const useSchool = (): UseSchoolReturn => {
   const [loading, setLoading] = useState(false);
   const [error, setError] = useState<string | null>(null);
 
-  /**
-   * Asynchronously fetches the details of a school by its ID.
-   *
-   * Updates the loading and error states accordingly.
-   *
-   * @param {string} schoolId - The ID of the school to fetch.
-   * @returns {Promise<School | null>} A promise that resolves to the school object if successful,
-   *                                   or null if an error occurs.
-   */
   const getSchoolById = async (schoolId: string): Promise<School | null> => {
     setLoading(true);
     setError(null);
@@ -50,15 +30,6 @@ export const useSchool = (): UseSchoolReturn => {
     }
   };
 
-  /**
-   * Asynchronously fetches school classes for a given school ID.
-   *
-   * Updates the loading and error states accordingly.
-   *
-   * @param {string} schoolId - The ID of the school to fetch classes for.
-   * @returns {Promise<Class[]>} A promise that resolves to an array of `Class` objects if successful,
-   *                             or an empty array if an error occurs.
-   */
   const fetchSchoolClasses = async (schoolId: string): Promise<Class[]> => {
     setLoading(true);
     setError(null);
@@ -73,14 +44,6 @@ export const useSchool = (): UseSchoolReturn => {
     }
   };
 
-  /**
-   * Asynchronously fetches a list of cycles.
-   *
-   * Updates the loading and error states accordingly.
-   *
-   * @returns {Promise<Cycle[]>} A promise that resolves to an array of `Cycle` objects if successful,
-   *                             or an empty array if an error occurs.
-   */
   const fetchCycles = async (): Promise<Cycle[]> => {
     setLoading(true);
     setError(null);
@@ -95,15 +58,6 @@ export const useSchool = (): UseSchoolReturn => {
     }
   };
 
-  /**
-   * Asynchronously fetches a list of grades for a given cycle ID.
-   *
-   * Updates the loading and error states accordingly.
-   *
-   * @param {string} cycleId - The ID of the cycle to fetch grades for.
-   * @returns {Promise<Grade[]>} A promise that resolves to an array of `Grade` objects if successful,
-   *                             or an empty array if an error occurs.
-   */
   const fetchGrades = async (cycleId: string): Promise<Grade[]> => {
     setLoading(true);
     setError(null);
@@ -118,16 +72,6 @@ export const useSchool = (): UseSchoolReturn => {
     }
   };
 
-  /**
-   * Asynchronously verifies if a user has director access for a given school.
-   *
-   * Updates the loading and error states accordingly.
-   *
-   * @param {string} userId - The ID of the user to verify.
-   * @param {string} schoolId - The ID of the school to check director access for.
-   * @returns {Promise<boolean>} A promise that resolves to true if the user has director access,
-   *                             false otherwise.
-   */
   const verifyDirectorAccess = async (
     userId: string,
     schoolId: string,
diff --git a/lib/supabase/constants.ts b/lib/supabase/constants.ts
index 80582de..46a5f9d 100644
--- a/lib/supabase/constants.ts
+++ b/lib/supabase/constants.ts
@@ -54,6 +54,11 @@ export const STUDENT_TABLE_ID = "students";
  */
 export const TEACHER_TABLE_ID = "teachers";
 
+/**
+ * The ID of the collection storing Teacher Class Assignment documents in the Supabase database.
+ */
+export const TEACHER_CLASS_ASSIGNMENTS_TABLE_ID = "teacher_class_assignments";
+
 /**
  * The ID of the collection storing Schedule documents in the Supabase database.
  */
diff --git a/metro.config.js b/metro.config.js
index 07c9fce..1514e6c 100644
--- a/metro.config.js
+++ b/metro.config.js
@@ -1,5 +1,5 @@
 // Learn more https://docs.expo.io/guides/customizing-metro
-const { getDefaultConfig } = require('expo/metro-config');
+const { getDefaultConfig } = require("expo/metro-config");
 
 /** @type {import('expo/metro-config').MetroConfig} */
 const config = getDefaultConfig(__dirname);
diff --git a/package.json b/package.json
index 6ac5b69..8f1f548 100644
--- a/package.json
+++ b/package.json
@@ -27,6 +27,7 @@
     "expo": "~51.0.28",
     "expo-camera": "~15.0.14",
     "expo-constants": "~16.0.2",
+    "expo-dev-client": "~4.0.26",
     "expo-device": "~6.0.2",
     "expo-font": "~12.0.9",
     "expo-haptics": "~13.0.1",
diff --git a/services/attendance.ts b/services/attendance.ts
index 8be92b3..9836680 100644
--- a/services/attendance.ts
+++ b/services/attendance.ts
@@ -1,41 +1,15 @@
 import { AttendanceRecord } from "@/types";
 import { ATTENDANCE_TABLE_ID, supabase } from "@/lib/supabase";
 
-/**
- * Module for managing attendance records.
- * @module attendance
- */
 export const attendance = {
-  /**
-   * Creates a new attendance record.
-   * @async
-   * @param {AttendanceRecord} attendanceData - The attendance data to create.
-   * @returns {Promise<void>} Resolves when the attendance record is created.
-   * @throws {Error} If there's an error creating the attendance record.
-   * @example
-   * const attendanceData = {
-   *   studentId: 'student123',
-   *   classId: 'class456',
-   *   subjectId: 'subject789',
-   *   startTime: '09:00:00',
-   *   endTime: '10:00:00',
-   *   status: 'present',
-   * };
-   * try {
-   *   await attendance.createAttendance(attendanceData);
-   *   console.log('Attendance record created successfully');
-   * } catch (error) {
-   *   console.error('Failed to create attendance:', error);
-   * }
-   */
   async createAttendance(attendanceData: AttendanceRecord): Promise<void> {
     try {
       await supabase.from(ATTENDANCE_TABLE_ID).insert({
         student_id: attendanceData.studentId,
         class_id: attendanceData.classId,
         subject_id: attendanceData.subjectId,
-        start_time: attendanceData.startTime,
-        end_time:
+        starts_at: attendanceData.startTime,
+        ends_at:
           attendanceData.status === "late"
             ? attendanceData.timestamp
             : attendanceData.endTime,
@@ -48,38 +22,6 @@ export const attendance = {
     }
   },
 
-  /**
-   * Creates multiple attendance records.
-   * @async
-   * @param {AttendanceRecord[]} attendanceDataArray - An array of attendance data to create.
-   * @returns {Promise<void>} Resolves when all attendance records are created.
-   * @throws {Error} If there's an error creating any of the attendance records.
-   * @example
-   * const attendanceDataArray = [
-   *   {
-   *     studentId: 'student123',
-   *     classId: 'class456',
-   *     subjectId: 'subject789',
-   *     startTime: '09:00:00',
-   *     endTime: '10:00:00',
-   *     status: 'present',
-   *   },
-   *   {
-   *     studentId: 'student456',
-   *     classId: 'class123',
-   *     subjectId: 'subject456',
-   *     startTime: '11:00:00',
-   *     endTime: '12:00:00',
-   *     status: 'absent',
-   *   },
-   * ];
-   * try {
-   *   await attendance.createAttendances(attendanceDataArray);
-   *   console.log('All attendance records created successfully');
-   * } catch (error) {
-   *   console.error('Failed to create attendances:', error);
-   * }
-   */
   async createAttendances(
     attendanceDataArray: AttendanceRecord[],
   ): Promise<void> {
@@ -88,13 +30,17 @@ export const attendance = {
         student_id: a.studentId,
         class_id: a.classId,
         subject_id: a.subjectId,
-        start_time: a.startTime,
-        end_time: a.status === "late" ? a.timestamp : a.endTime,
+        starts_at: a.startTime,
+        ends_at: a.status === "late" ? a.timestamp : a.endTime,
         status: a.status,
         is_excused: false,
       };
     });
 
-    await supabase.from(ATTENDANCE_TABLE_ID).insert([formatedData]);
+    try {
+      await supabase.from(ATTENDANCE_TABLE_ID).insert(formatedData);
+    } catch (e) {
+      console.error("[E_AT]:", e);
+    }
   },
 };
diff --git a/services/auth.ts b/services/auth.ts
index 29fdc9d..666bd70 100644
--- a/services/auth.ts
+++ b/services/auth.ts
@@ -13,34 +13,7 @@ interface IGetSession {
   error: AuthError | null;
 }
 
-/**
- * @module auth
- * This module provides functions for user authentication and account management.
- */
 export const auth = {
-  /**
-   * Creates a new user account.
-   *
-   * This function creates a new user account with the provided email, password, and name.
-   * It uses the `account.create` method from the Appwrite SDK to interact with the authentication system.
-   * A unique ID is generated for the user using `ID.unique()`.
-   *
-   * @param {string} email - The email address of the new user.
-   * @param {string} password - The password for the new user.
-   * @param {string} name - The name of the new user.
-   * @returns {Promise<AuthResponse>} A promise that resolves to the response from the Appwrite API.
-   * @throws {Error} If there is an error creating the account.
-   *
-   * @example
-   * ```
-   * try {
-   *   await auth.createAccount('john.doe@example.com', 'password123', 'John Doe');
-   *   console.log('Account created successfully!');
-   * } catch (error) {
-   *   console.error('Error creating account:', error);
-   * }
-   * ```
-   */
   async createAccount(
     email: string,
     password: string,
@@ -58,27 +31,6 @@ export const auth = {
     }
   },
 
-  /**
-   * Creates a new user session.
-   *
-   * This function creates a new user session by authenticating the user with the provided email and password.
-   * It uses the `account.loginWithEmailAndPassword` method from the Appwrite SDK.
-   *
-   * @param {string} email - The email address of the user.
-   * @param {string} password - The password of the user.
-   * @returns {Promise<AuthTokenResponsePassword>} A promise that resolves to the response from the Appwrite API.
-   * @throws {Error} If there is an error creating the session.
-   *
-   * @example
-   * ```
-   * try {
-   *   await auth.loginWithEmailAndPassword('john.doe@example.com', 'password123');
-   *   console.log('Session created successfully!');
-   * } catch (error) {
-   *   console.error('Error creating session:', error);
-   * }
-   * ```
-   */
   async loginWithEmailAndPassword(
     email: string,
     password: string,
@@ -91,25 +43,6 @@ export const auth = {
     }
   },
 
-  /**
-   * Gets the currently logged-in user's account information.
-   *
-   * This function retrieves the account information of the currently logged-in user.
-   * It uses the `account.get` method from the Appwrite SDK.
-   *
-   * @returns {Promise<IGetSession>} A promise that resolves to the user's account information.
-   * @throws {Error} If there is an error getting the account information.
-   *
-   * @example
-   * ```
-   * try {
-   *   const account = await auth.getAccount();
-   *   console.log('Account information:', account);
-   * } catch (error) {
-   *   console.error('Error getting account information:', error);
-   * }
-   * ```
-   */
   async getAccount(): Promise<IGetSession> {
     try {
       return await supabase.auth.getSession();
@@ -119,25 +52,6 @@ export const auth = {
     }
   },
 
-  /**
-   * Deletes a user session.
-   *
-   * This function deletes the specified user session, effectively logging out the user.
-   * It uses the `account.deleteSession` method from the Appwrite SDK.
-   *
-   * @returns {Promise<{ error: AuthError | null }>} A promise that resolves to the response from the Appwrite API.
-   * @throws {Error} If there is an error deleting the session.
-   *
-   * @example
-   * ```
-   * try {
-   *   await auth.deleteSession('session123');
-   *   console.log('Session deleted successfully!');
-   * } catch (error) {
-   *   console.error('Error deleting session:', error);
-   * }
-   * ```
-   */
   async deleteSession(): Promise<{ error: AuthError | null }> {
     try {
       return await supabase.auth.signOut();
diff --git a/services/class.ts b/services/class.ts
index c1d0a6f..4618113 100644
--- a/services/class.ts
+++ b/services/class.ts
@@ -1,24 +1,19 @@
 import { ClassDetails, ClassSchedule, Student, Teacher } from "@/types";
-import { CLASS_TABLE_ID, SCHEDULE_TABLE_ID, supabase } from "@/lib/supabase";
+import {
+  CLASS_TABLE_ID,
+  SCHEDULE_TABLE_ID,
+  supabase,
+  TEACHER_TABLE_ID,
+  STUDENT_TABLE_ID,
+} from "@/lib/supabase";
 import { formatFullName } from "@/utils/formatting";
 
-/**
- * @module class
- * This module provides functions for interacting with class data.
- */
 export const classService = {
-  /**
-   * Fetches the details for a specific class, including students, teachers, and schedules.
-   *
-   * @param {string} classId - The ID of the class.
-   * @returns {Promise<ClassDetails>} A promise that resolves to a `ClassDetails` object containing class details, students, teachers, and schedules.
-   * @throws {Error} If there is an error fetching the class details.
-   */
   async fetchClassDetails(classId: string): Promise<ClassDetails> {
     try {
       const { data: classData, error: classError } = await supabase
         .from(CLASS_TABLE_ID)
-        .select("*")
+        .select("id, name, school_id, schedule: schedules(*)")
         .eq("id", classId)
         .single();
 
@@ -37,8 +32,6 @@ export const classService = {
           name: classData.name,
           schoolId: classData.school_id,
           schedule: classData.schedule || [],
-          mainTeacherId: classData.main_teacher_id || "",
-          gradeId: classData.grade_id || "",
         },
         students,
         teachers,
@@ -50,17 +43,10 @@ export const classService = {
     }
   },
 
-  /**
-   * Fetches a list of students for a given class.
-   *
-   * @param {string} classId - The ID of the class.
-   * @returns {Promise<Student[]>} A promise that resolves to an array of `Student` objects.
-   * @throws {Error} If there is an error fetching the students.
-   */
   async fetchStudentsForClass(classId: string): Promise<Student[]> {
     try {
       const { data: students, error } = await supabase
-        .from("students") // Assuming your student table is named "students"
+        .from(STUDENT_TABLE_ID) // Assuming your student table is named "students"
         .select("id, parent_id, id_number, first_name, last_name")
         .eq("class_id", classId);
 
@@ -83,19 +69,12 @@ export const classService = {
     }
   },
 
-  /**
-   * Fetches a list of teachers for a given class.
-   *
-   * @param {string} classId - The ID of the class.
-   * @returns {Promise<Teacher[]>} A promise that resolves to an array of `Teacher` objects.
-   * @throws {Error} If there is an error fetching the teachers.
-   */
   async fetchTeachersForClass(classId: string): Promise<Teacher[]> {
     try {
       const { data: teachers, error } = await supabase
-        .from("teachers") // Assuming your teacher table is named "teachers"
-        .select("id, phone, full_name")
-        .contains("class_ids", [classId]); // Assuming class_ids is an array column
+        .from(TEACHER_TABLE_ID)
+        .select("id, phone, full_name, teacher_class_assignments (id)")
+        .eq("teacher_class_assignments.class_id", classId);
 
       if (error) {
         console.error("Error fetching teachers for class:", error);
@@ -113,13 +92,6 @@ export const classService = {
     }
   },
 
-  /**
-   * Fetches a list of schedules for a given class.
-   *
-   * @param {string} classId - The ID of the class.
-   * @returns {Promise<ClassSchedule[]>} A promise that resolves to an array of `ClassSchedule` objects.
-   * @throws {Error} If there is an error fetching the schedules.
-   */
   async fetchSchedulesForClass(classId: string): Promise<ClassSchedule[]> {
     try {
       const { data: schedules, error } = await supabase
diff --git a/services/homework.ts b/services/homework.ts
index a31dbbb..3fb3223 100644
--- a/services/homework.ts
+++ b/services/homework.ts
@@ -1,37 +1,13 @@
 import { Homework } from "@/types";
 import { HOMEWORK_TABLE_ID, supabase } from "@/lib/supabase";
 
-/**
- * Module for managing homework records.
- * @module homework
- */
 export const homework = {
-  /**
-   * Creates a new homework record.
-   * @async
-   * @param {Homework} homeworkData - The homework data to create.
-   * @returns {Promise<void>} Resolves when the homework record is created.
-   * @throws {Error} If there's an error creating the homework record.
-   * @example
-   * const homeworkData = {
-   *   classId: 'class123',
-   *   teacherId: 'teacher456',
-   *   dueDate: '2024-04-15',
-   *   isGraded: true,
-   * };
-   * try {
-   *   await homework.createHomework(homeworkData);
-   *   console.log('Homework created successfully');
-   * } catch (error) {
-   *   console.error('Failed to create homework:', error);
-   * }
-   */
   async createHomework(homeworkData: Homework): Promise<void> {
     try {
       await supabase.from(HOMEWORK_TABLE_ID).insert({
         class_id: homeworkData.classId,
         teacher_id: homeworkData.teacherId,
-        subject_name: homeworkData.subjectName,
+        subject_id: homeworkData.subjectId,
         due_date: homeworkData.dueDate,
         is_graded: homeworkData.isGraded,
       });
@@ -41,29 +17,11 @@ export const homework = {
     }
   },
 
-  /**
-   * Creates multiple homework records.
-   * @async
-   * @param {Homework[]} homeworkDataArray - An array of homework data to create.
-   * @returns {Promise<void>} Resolves when all homework records are created.
-   * @throws {Error} If there's an error creating any of the homework records.
-   * @example
-   * const homeworkDataArray = [
-   *   { classId: 'class123', teacherId: 'teacher456', dueDate: '2024-04-15', isGraded: true },
-   *   { classId: 'class789', teacherId: 'teacher101', dueDate: '2024-04-20', isGraded: false },
-   * ];
-   * try {
-   *   await homework.createHomeworks(homeworkDataArray);
-   *   console.log('Homeworks created successfully');
-   * } catch (error) {
-   *   console.error('Failed to create homeworks:', error);
-   * }
-   */
   async createHomeworks(homeworkDataArray: Homework[]): Promise<void> {
     const formattedData = homeworkDataArray.map((homework) => ({
       class_id: homework.classId,
       teacher_id: homework.teacherId,
-      subject_name: homework.subjectName,
+      subject_id: homework.subjectId,
       due_date: homework.dueDate,
       is_graded: homework.isGraded,
     }));
@@ -75,11 +33,4 @@ export const homework = {
       throw error;
     }
   },
-
-  // TODO: Add more functions as needed, such as:
-  // - fetchHomeworkRecords
-  // - updateHomework
-  // - deleteHomework
-  // - getHomeworkByClass
-  // - getHomeworkByTeacher
 };
diff --git a/services/participation.ts b/services/participation.ts
index fd73411..85bd0b3 100644
--- a/services/participation.ts
+++ b/services/participation.ts
@@ -1,48 +1,17 @@
 import { Participation } from "@/types";
 import { PARTICIPATION_TABLE_ID, supabase } from "@/lib/supabase";
 
-/**
- * Module for managing participation records.
- * @module participation
- */
 export const participation = {
-  /**
-   * Creates a new participation record.
-   * @async
-   * @param {string} classId - The ID of the class.
-   * @param {string} teacherId - The ID of the teacher.
-   * @param {Participation} participationData - The participation data to create.
-   * @returns {Promise<void>} Resolves when the participation record is created.
-   * @throws {Error} If there's an error creating the participation record.
-   * @example
-   * const classId = 'class123';
-   * const teacherId = 'teacher456';
-   * const participationData = {
-   *   studentId: 'student789',
-   *   sessionId: 'session101112',
-   *   comment: 'Active participation in group discussion',
-   *   timestamp: new Date().toISOString(),
-   * };
-   * try {
-   *   await participation.createParticipation(classId, teacherId, participationData);
-   *   console.log('Participation record created successfully');
-   * } catch (error) {
-   *   console.error('Failed to create participation record:', error);
-   * }
-   */
   async createParticipation(
     classId: string,
-    teacherId: string,
+    subjectId: string,
     participationData: Participation,
   ): Promise<void> {
     try {
       await supabase.from(PARTICIPATION_TABLE_ID).insert({
-        class_id: classId,
-        teacher_id: teacherId,
+        subject_id: subjectId,
         student_id: participationData.studentId,
-        session_id: participationData.sessionId,
-        comment: participationData.comment,
-        timestamp: participationData.timestamp,
+        class_id: classId,
       });
     } catch (error) {
       console.error("Error creating participation record:", error);
@@ -50,40 +19,15 @@ export const participation = {
     }
   },
 
-  /**
-   * Creates multiple participation records.
-   * @async
-   * @param {string} classId - The ID of the class.
-   * @param {string} teacherId - The ID of the teacher.
-   * @param {Participation[]} participationDataArray - An array of participation data to create.
-   * @returns {Promise<void>} Resolves when all participation records are created.
-   * @throws {Error} If there's an error creating any of the participation records.
-   * @example
-   * const classId = 'class123';
-   * const teacherId = 'teacher456';
-   * const participationDataArray = [
-   *   { studentId: 'student789', sessionId: 'session101112', comment: 'Active in discussion', timestamp: new Date().toISOString() },
-   *   { studentId: 'student101112', sessionId: 'session101112', comment: 'Asked insightful questions', timestamp: new Date().toISOString() },
-   * ];
-   * try {
-   *   await participation.createParticipations(classId, teacherId, participationDataArray);
-   *   console.log('All participation records created successfully');
-   * } catch (error) {
-   *   console.error('Failed to create participation records:', error);
-   * }
-   */
   async createParticipations(
     classId: string,
-    teacherId: string,
+    subjectId: string,
     participationDataArray: Participation[],
   ): Promise<void> {
     const formattedData = participationDataArray.map((p) => ({
-      class_id: classId,
-      teacher_id: teacherId,
+      subject_id: subjectId,
       student_id: p.studentId,
-      session_id: p.sessionId,
-      comment: p.comment,
-      timestamp: p.timestamp,
+      class_id: classId,
     }));
 
     try {
diff --git a/services/school.ts b/services/school.ts
index 3386b83..7a1d52e 100644
--- a/services/school.ts
+++ b/services/school.ts
@@ -7,24 +7,7 @@ import {
   supabase,
 } from "@/lib/supabase";
 
-/**
- * @module school
- * This module provides functions for interacting with school data.
- */
 export const school = {
-  /**
-   * Fetches the details of a school by its ID.
-   *
-   * @param {string} schoolId - The ID of the school to fetch.
-   * @returns {Promise<School>} A promise that resolves to the school object.
-   * @throws {Error} If there is an error fetching the school details.
-   *
-   * @example
-   * ```
-   * const schoolDetails = await school.getSchoolById('school123');
-   * console.log(schoolDetails); // { id: 'school123', name: 'Greenwood High', state: 'active', address: '123 Street Name' }
-   * ```
-   */
   async getSchoolById(schoolId: string): Promise<School> {
     try {
       const { data, error } = await supabase
@@ -50,19 +33,6 @@ export const school = {
     }
   },
 
-  /**
-   * Fetches a list of classes for a given school.
-   *
-   * @param {string} schoolId - The ID of the school.
-   * @returns {Promise<Class[]>} A promise that resolves to an array of Class objects.
-   * @throws {Error} If there is an error fetching the classes.
-   *
-   * @example
-   * ```
-   * const classes = await school.fetchSchoolClasses('school123');
-   * console.log(classes); // [{ id: 'class456', name: 'Math 101', schoolId: 'school123', schedule: [], mainTeacherId: '', gradeId: '' }, ...]
-   * ```
-   */
   async fetchSchoolClasses(schoolId: string): Promise<Class[]> {
     try {
       const { data, error } = await supabase
@@ -89,12 +59,6 @@ export const school = {
     }
   },
 
-  /**
-   * Fetches a list of cycles.
-   *
-   * @returns {Promise<Cycle[]>} A promise that resolves to an array of Cycle objects.
-   * @throws {Error} If there is an error fetching the cycles.
-   */
   async fetchCycles(): Promise<Cycle[]> {
     try {
       const { data, error } = await supabase.from(CYCLE_TABLE_ID).select("*");
@@ -115,13 +79,6 @@ export const school = {
     }
   },
 
-  /**
-   * Fetches a list of grades for a given cycle.
-   *
-   * @param {string} cycleId - The ID of the cycle.
-   * @returns {Promise<Grade[]>} A promise that resolves to an array of Grade objects.
-   * @throws {Error} If there is an error fetching the grades.
-   */
   async fetchGrades(cycleId: string): Promise<Grade[]> {
     try {
       const { data, error } = await supabase
@@ -145,54 +102,24 @@ export const school = {
     }
   },
 
-  /**
-   * Verifies if a user has director access to a school.
-   *
-   * @param {string} userId - The ID of the user.
-   * @param {string} schoolId - The ID of the school.
-   * @returns {Promise<boolean>} A promise that resolves to true if the user has director access, false otherwise.
-   *
-   * @example
-   * ```
-   * const hasAccess = await school.verifyDirectorAccess('user123', 'school456');
-   * if (hasAccess) {
-   *   // User has director access
-   * } else {
-   *   // User does not have director access
-   * }
-   * ```
-   */
   async verifyDirectorAccess(
     userId: string,
     schoolId: string,
   ): Promise<boolean> {
     try {
-      // Check if the user is a director of the school and the school is active in a single query.
-      const { data: user, error: userError } = await supabase
-        .from("users") // Assuming your user table is named "users"
-        .select("*")
-        .eq("id", userId)
-        .eq("role", "director")
-        .eq("school_id", schoolId)
-        .single();
-
       const { data: school, error: schoolError } = await supabase
         .from(SCHOOL_TABLE_ID)
         .select("*")
         .eq("id", schoolId)
-        .eq("state", "active")
+        .eq("state_id", 1)
         .single();
 
-      if (userError || schoolError) {
-        console.error(
-          "Error verifying director access:",
-          userError || schoolError,
-        );
+      if (schoolError) {
+        console.error("Error verifying director access:", schoolError);
         return false;
       }
 
-      // Check if both the user is a director and the school is active
-      return !!user && !!school;
+      return !!school;
     } catch (error) {
       console.error("Error verifying director access:", error);
       return false;
diff --git a/tsconfig.json b/tsconfig.json
index 3141857..4a67d8f 100644
--- a/tsconfig.json
+++ b/tsconfig.json
@@ -2,19 +2,11 @@
   "extends": "expo/tsconfig.base",
   "compilerOptions": {
     "strict": true,
+    "jsx": "react-native",
     "paths": {
-      "@/*": [
-        "./*"
-      ]
+      "@/*": ["./*"]
     }
   },
-  "include": [
-    "**/*.ts",
-    "**/*.tsx",
-    ".expo/types/**/*.ts",
-    "expo-env.d.ts"
-  ],
-  "exclude": [
-    ".expo/types/*"
-  ]
+  "include": ["**/*.ts", "**/*.tsx", ".expo/types/**/*.ts", "expo-env.d.ts"],
+  "exclude": [".expo/types/*"]
 }
diff --git a/types/auth.ts b/types/auth.ts
index 54270ad..a398371 100644
--- a/types/auth.ts
+++ b/types/auth.ts
@@ -1,8 +1,6 @@
 export interface User {
   id: string;
   email: string;
-  firstName: string;
-  lastName: string;
   role: "director" | "teacher";
   schoolId?: string;
   createAt?: string;
diff --git a/types/class.ts b/types/class.ts
index fa9f78d..97a56bd 100644
--- a/types/class.ts
+++ b/types/class.ts
@@ -3,7 +3,7 @@ import { Student, Teacher } from "@/types/school";
 export interface Class {
   id: string;
   name: string;
-  gradeId: string;
+  gradeId?: string;
   schoolId: string;
   mainTeacherId?: string;
   schedule?: ClassSchedule[];
diff --git a/types/homework.ts b/types/homework.ts
index 4251778..e16a6e6 100644
--- a/types/homework.ts
+++ b/types/homework.ts
@@ -2,7 +2,7 @@ export interface Homework {
   id?: string; // autofill in server side, not necessary in form
   classId: string; // autofill in server side, not necessary in form
   teacherId: string; // autofill in server side, not necessary in form
-  subjectName: string; // autofill in server side, not necessary in form
+  subjectId: string; // autofill in server side, not necessary in form
   dueDate: string;
   isGraded: boolean;
 }
diff --git a/types/participation.ts b/types/participation.ts
index 1291c67..4fd41a6 100644
--- a/types/participation.ts
+++ b/types/participation.ts
@@ -9,7 +9,7 @@ export interface Participation {
 export interface ParticipationSession {
   id?: string;
   classId: string;
-  teacherId: string;
+  subjectId: string;
   date: string;
   participations: Participation[];
 }
diff --git a/utils/dateTime.ts b/utils/dateTime.ts
index 03f88ee..bc613dc 100644
--- a/utils/dateTime.ts
+++ b/utils/dateTime.ts
@@ -30,6 +30,8 @@ export function formatDate(date: Date | string): string {
  */
 export function formatTime(date: Date | string): string {
   if (typeof date === "string" && date.length === 5) return date;
+  if (typeof date === "string" && date.length === 8)
+    return date.substring(0, 5);
 
   const parsedDate = typeof date === "string" ? new Date(date) : date;
   return format(parsedDate, TIME_FORMAT);
@@ -133,6 +135,7 @@ export function compareTimeStrings(time1: string, time2: string): number {
  * @returns {string} The extracted hour and minute in the format "HH:mm".
  */
 export function extractHourAndMinute(dateString: string): string {
+  if (dateString.length === 8) return dateString.substring(0, 5);
   const date = parseISO(dateString);
   return format(date, "HH:mm");
 }
diff --git a/yarn.lock b/yarn.lock
index f3cc8dc..f6289f3 100644
--- a/yarn.lock
+++ b/yarn.lock
@@ -2617,6 +2617,16 @@ ajv-keywords@^5.1.0:
   dependencies:
     fast-deep-equal "^3.1.3"
 
+ajv@8.11.0:
+  version "8.11.0"
+  resolved "https://registry.yarnpkg.com/ajv/-/ajv-8.11.0.tgz#977e91dd96ca669f54a11e23e378e33b884a565f"
+  integrity sha512-wGgprdCvMalC0BztXvitD2hC04YffAvtsUn93JbGXYLAtCUO4xd17mCCZQxUOItiBwZvJScWo8NIvQMQ71rdpg==
+  dependencies:
+    fast-deep-equal "^3.1.1"
+    json-schema-traverse "^1.0.0"
+    require-from-string "^2.0.2"
+    uri-js "^4.2.2"
+
 ajv@^6.12.4:
   version "6.12.6"
   resolved "https://registry.yarnpkg.com/ajv/-/ajv-6.12.6.tgz#baf5a62e802b07d977034586f8c3baf5adf26df4"
@@ -4393,6 +4403,41 @@ expo-constants@~16.0.0, expo-constants@~16.0.2:
     "@expo/config" "~9.0.0"
     "@expo/env" "~0.3.0"
 
+expo-dev-client@~4.0.26:
+  version "4.0.26"
+  resolved "https://registry.yarnpkg.com/expo-dev-client/-/expo-dev-client-4.0.26.tgz#3c172dccab06da7ca09ef4b743142fbf82978fa6"
+  integrity sha512-GM+X7bngAK2vr0YMkPnQFUFVW22eG3CjoxTJ0yUwW3RgCqFdMkTeAIS/1sEXjyNYjGkigtgtch+bdYtJxfqpuw==
+  dependencies:
+    expo-dev-launcher "4.0.27"
+    expo-dev-menu "5.0.21"
+    expo-dev-menu-interface "1.8.3"
+    expo-manifests "~0.14.0"
+    expo-updates-interface "~0.16.2"
+
+expo-dev-launcher@4.0.27:
+  version "4.0.27"
+  resolved "https://registry.yarnpkg.com/expo-dev-launcher/-/expo-dev-launcher-4.0.27.tgz#77261eb3f4ad2fe467b7e9adc2dd4a0e868563af"
+  integrity sha512-n+uUkcr5f5v5VR0sDw/sGna4aut2nTu3EiOqA0ijb8fBuelpgqYiBp2x7Su6wT6InoBHZxTBgVlyzgLNFGSdDw==
+  dependencies:
+    ajv "8.11.0"
+    expo-dev-menu "5.0.21"
+    expo-manifests "~0.14.0"
+    resolve-from "^5.0.0"
+    semver "^7.6.0"
+
+expo-dev-menu-interface@1.8.3:
+  version "1.8.3"
+  resolved "https://registry.yarnpkg.com/expo-dev-menu-interface/-/expo-dev-menu-interface-1.8.3.tgz#8c1262e29e0124fc5932a129c95b36de56656b20"
+  integrity sha512-QM0LRozeFT5Ek0N7XpV93M+HMdEKRLEOXn0aW5M3uoUlnqC1+PLtF3HMy3k3hMKTTE/kJ1y1Z7akH07T0lunCQ==
+
+expo-dev-menu@5.0.21:
+  version "5.0.21"
+  resolved "https://registry.yarnpkg.com/expo-dev-menu/-/expo-dev-menu-5.0.21.tgz#668cc923a9521e4f5c36ffd0664f5c280e154f3a"
+  integrity sha512-i7kOaxOeBksqgeUDvb5vb2cZIVLZhAX2rjLJNH3fBifiAWISeCBAQsKN9vAkMPQGqL9F88vjMyy14ca6Vo+fEw==
+  dependencies:
+    expo-dev-menu-interface "1.8.3"
+    semver "^7.5.4"
+
 expo-device@~6.0.2:
   version "6.0.2"
   resolved "https://registry.yarnpkg.com/expo-device/-/expo-device-6.0.2.tgz#9bc3eccd16509c2819c225cc2ca8f7c3e3bdd11e"
@@ -4417,6 +4462,11 @@ expo-haptics@~13.0.1:
   resolved "https://registry.yarnpkg.com/expo-haptics/-/expo-haptics-13.0.1.tgz#35679c7fde4ae1c21ae3bc2d2cb34c266049dc2c"
   integrity sha512-qG0EOLDE4bROVT3DtUSyV9g3iB3YFu9j3711X7SNNEnBDXc+2/p3wGDPTnJvPW0ao6HG3/McAOrBQA5hVSdWng==
 
+expo-json-utils@~0.13.0:
+  version "0.13.1"
+  resolved "https://registry.yarnpkg.com/expo-json-utils/-/expo-json-utils-0.13.1.tgz#e49b697198e11c573d346f08ab91c467095934a9"
+  integrity sha512-mlfaSArGVb+oJmUcR22jEONlgPp0wj4iNIHfQ2je9Q8WTOqMc0Ws9tUciz3JdJnhffdHqo/k8fpvf0IRmN5HPA==
+
 expo-keep-awake@~13.0.2:
   version "13.0.2"
   resolved "https://registry.yarnpkg.com/expo-keep-awake/-/expo-keep-awake-13.0.2.tgz#5ef31311a339671eec9921b934fdd90ab9652b0e"
@@ -4430,6 +4480,14 @@ expo-linking@~6.3.1:
     expo-constants "~16.0.0"
     invariant "^2.2.4"
 
+expo-manifests@~0.14.0:
+  version "0.14.3"
+  resolved "https://registry.yarnpkg.com/expo-manifests/-/expo-manifests-0.14.3.tgz#17854c45c8c9ced4a07031ae0838c38ac3115fbc"
+  integrity sha512-L3b5/qocBPiQjbW0cpOHfnqdKZbTJS7sA3mgeDJT+mWga/xYsdpma1EfNmsuvrOzjLGjStr1k1fceM9Bl49aqQ==
+  dependencies:
+    "@expo/config" "~9.0.0"
+    expo-json-utils "~0.13.0"
+
 expo-modules-autolinking@1.11.2:
   version "1.11.2"
   resolved "https://registry.yarnpkg.com/expo-modules-autolinking/-/expo-modules-autolinking-1.11.2.tgz#98245eb66f157bbfebebd2d576256ea7c683c605"
@@ -4499,6 +4557,11 @@ expo-system-ui@~3.0.7:
     "@react-native/normalize-colors" "0.74.85"
     debug "^4.3.2"
 
+expo-updates-interface@~0.16.2:
+  version "0.16.2"
+  resolved "https://registry.yarnpkg.com/expo-updates-interface/-/expo-updates-interface-0.16.2.tgz#ad1ac2ca8ee5a8cc84052ea3c18a11da64da569b"
+  integrity sha512-929XBU70q5ELxkKADj1xL0UIm3HvhYhNAOZv5DSk7rrKvLo7QDdPyl+JVnwZm9LrkNbH4wuE2rLoKu1KMgZ+9A==
+
 expo-web-browser@~13.0.3:
   version "13.0.3"
   resolved "https://registry.yarnpkg.com/expo-web-browser/-/expo-web-browser-13.0.3.tgz#dceb05dbc187b498ca937b02adf385b0232a4e92"
